###############################
# Core EditorConfig Options   #
###############################

root = true

# All files
[Assets/Scripts/**/*]
indent_style = space

# Code files
[Assets/Scripts/**/*.{cs,csx}]
indent_size = 4
insert_final_newline = false

###############################
# .NET Coding Conventions     #
###############################

[Assets/Scripts/**/*.cs]

# Organize usings
dotnet_sort_system_directives_first = true

# Don't use this.
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_event = false:warning

# prefer Language keywords over BCL types
dotnet_style_predefined_type_for_locals_parameters_members = true:none
dotnet_style_predefined_type_for_member_access = true:none

# Modifier preferences
dotnet_style_require_accessibility_modifiers = always:warning
dotnet_style_readonly_field = true:suggestion

# var preferences
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = false:warning
csharp_style_var_elsewhere = false:warning

# Expression-bodied members
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = false:suggestion
csharp_style_expression_bodied_indexers = false:none
csharp_style_expression_bodied_accessors = true:suggestion

# Pattern-matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = false:none
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Expression-level preferences
csharp_prefer_braces = true:error
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_pattern_local_over_anonymous_function = false:none
csharp_style_inlined_variable_declaration = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion

# Unity related
# Prevent possible issues from null propagation/coalescing
dotnet_style_null_propagation = false:suggestion
dotnet_style_coalesce_expression = false:suggestion

###############################
# C# Formatting Rules         #
###############################

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Space preferences
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

###############################
# Naming Symbols              #
###############################

# public_constant_fields - allowed by design guidelines, and naming guidelines indicate PascalCasing
dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, protected
dotnet_naming_symbols.public_constant_fields.required_modifiers = const

# public_static_readonly_fields - allowed by design guidelines, and naming guidelines indicate PascalCasing
dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, protected
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = static, readonly

# private_fields - allowed by design guidelines, but naming is not specified by naming guidelines
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, internal, protected_internal

# public_fields - not allowed by design guidelines
dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public

# match_all_fields - any field that does not match one of the above is disallowed by design guidelines
dotnet_naming_symbols.match_all_fields.applicable_kinds = field

# parameters - Defines any parameter (camelCasing)
dotnet_naming_symbols.parameters.applicable_kinds = parameter

# non_interface_types - Defines class, struct, enum and delegate types (PascalCasing)
dotnet_naming_symbols.non_interface_types.applicable_kinds = class, struct, enum, delegate

# interface_types - Defines interfaces (prefix = I, PascalCasing)
dotnet_naming_symbols.interface_types.applicable_kinds = interface

# public_symbols - methods, properties, events, and delegates (PascalCasing)
dotnet_naming_symbols.public_symbols.applicable_kinds = method, property, event, delegate
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public, protected

# private_symbols - Define any private symbol
dotnet_naming_symbols.private_symbols.applicable_kinds = method, property, event, delegate
dotnet_naming_symbols.private_symbols.applicable_accessibilities = private, internal, protected_internal

###############################
# Naming Styles               #
###############################

# pascal_case - Define the PascalCase style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# camel_case - Define the camelCase style
dotnet_naming_style.camel_case_style.capitalization = camel_case

# camel_case - Define the _camelCase style
dotnet_naming_style.camel_case_with_underscore_style.capitalization = camel_case
dotnet_naming_style.camel_case_with_underscore_style.required_prefix = _

# prefix_interface_interface_with_i - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_interface_with_i_style.required_prefix = I

# disallowed_by_design_guidelines - use to auto-format items that are disallowed by the design guidelines
dotnet_naming_style.disallowed_by_design_guidelines_style.capitalization = pascal_case
dotnet_naming_style.disallowed_by_design_guidelines_style.required_prefix = ____NOT_ALLOWED____

###############################
# Naming Rules                #
###############################

# public constant fields must be PascalCase
dotnet_naming_rule.public_constant_fields_rule.symbols  = public_constant_fields
dotnet_naming_rule.public_constant_fields_rule.style    = pascal_case_style
dotnet_naming_rule.public_constant_fields_rule.severity = warning

# public static readonly fields must be PascalCase
dotnet_naming_rule.public_static_readonly_fields_rule.symbols  = public_static_readonly_fields
dotnet_naming_rule.public_static_readonly_fields_rule.style    = pascal_case_style
dotnet_naming_rule.public_static_readonly_fields_rule.severity = warning

# private fields must be _camelCase
dotnet_naming_rule.private_fields_rule.symbols  = private_fields
dotnet_naming_rule.private_fields_rule.style    = camel_case_with_underscore_style
dotnet_naming_rule.private_fields_rule.severity = warning

# No other fields (e.g., variable public) are allowed by the design guidelines
dotnet_naming_rule.match_all_fields_rule.symbols  = public_fields
dotnet_naming_rule.match_all_fields_rule.style    = pascal_case_style
dotnet_naming_rule.match_all_fields_rule.severity = warning

# Public members must be PascalCase
dotnet_naming_rule.public_members_must_be_capitalized.symbols  = public_symbols
dotnet_naming_rule.public_members_must_be_capitalized.style    = pascal_case_style
dotnet_naming_rule.public_members_must_be_capitalized.severity = warning

# Class, struct, enum and delegates must be PascalCase
dotnet_naming_rule.non_interface_types_must_be_pascal_case.symbols  = non_interface_types
dotnet_naming_rule.non_interface_types_must_be_pascal_case.style    = pascal_case_style
dotnet_naming_rule.non_interface_types_must_be_pascal_case.severity = warning

# Interfaces must be PascalCase and start with an 'I'
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.symbols  = interface_types
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.style    = prefix_interface_interface_with_i_style
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.severity = warning

# Parameters must be camelCase
dotnet_naming_rule.parameters_must_be_camel_case.symbols  = parameters
dotnet_naming_rule.parameters_must_be_camel_case.style    = camel_case_style
dotnet_naming_rule.parameters_must_be_camel_case.severity = warning
